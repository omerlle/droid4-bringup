;;; client_app.el --- 
;; 
;; Filename: client_app.el
;; Author: omer levin
;; Copyright (C) 2020, omer levin, all rights reserved.

(load "/usr/local/share/droid4/emacs/nickname_hash.elc")
(setq save-list (make-hash-table :test 'equal))
(defun send-sms (button)
 (goto-char (point-min))
 (let ((msg (filter-buffer-substring 
    (line-beginning-position 2)
    (line-end-position (- (line-number-at-pos (point-max)) 1)))))
    (options-page nil)
    (shell-command (format "/usr/local/share/droid4/python3_packages/modem_wrapper/software/main.py send -p '%s' '%s'" droid-phone-number msg))))
					;    (message (format "sms -p '%s' %s" droid-phone-number msg)))))
(defun call-action (button)
 (goto-char (point-min))
 (shell-command (format "/usr/local/share/droid4/python3_packages/modem_wrapper/software/main.py dials '%s'" droid-phone-number)))
(defun select-phone-number (button)
 (beginning-of-line)
 (setq droid-name (buffer-substring-no-properties (search-forward "|" nil t) (- (search-forward "|" nil t) 1)))
 (setq droid-name (concat droid-name " " (buffer-substring-no-properties (point) (- (search-forward "|" nil t) 1))))
 (setq droid-phone-number (buffer-substring-no-properties (search-forward "|" nil t 4) (line-end-position)))
 (set-buffer-modified-p nil)
 (kill-buffer)
 (options-page nil))
(defun save-phone-action (button)
 (save-excursion
  (let ((row (gethash (completing-read "choose contact:" save-list) save-list)))
   (setq droid-name (car row))
   (setq droid-phone-number (nth 1 row))
   (options-page nil))))
(defun nickname-action (button)
 (save-excursion
  (let ((row (gethash (completing-read "nickname:" nickname-list) nickname-list)))
   (setq droid-name (car row))
   (setq droid-phone-number (nth 1 row))
   (options-page nil))))
(defun phone-number-action (button)
  (setq droid-name (read-from-minibuffer "number:"))
  (setq droid-phone-number droid-name)
  (options-page nil))
(defun phone-number-list-action (button)
(let ((buffer (find-file-noselect "/usr/local/share/droid4/emacs/phone_list.txt")))
  (switch-to-buffer buffer)
  (make-text-button (point-min) (point-max) 'action 'select-phone-number)
  (setq buffer-read-only t)
  (widen)
  (goto-char (point-min))))
(defun send-sms-page (button)
 (let ((back "back")
   (send (concat "send to" droid-name)))
  (erase-buffer)
  (goto-char (point-min))
  (insert back)
  (make-text-button (- (point) (length back)) (point) 'action 'options-page)
  (insert "\n\n" send)
  (make-text-button (- (point) (length send)) (point) 'action 'send-sms)
  (goto-char (+ 2 (length back)))))
(defun options-page (button)
 (save-excursion
  (let ((option-list (cons '("send sms" send-sms-page)
    (cons (cons (concat "call" droid-name) '(call-action))
    '(("new number" main-page))))))
   (erase-buffer)
   (dolist (row option-list)
    (insert (car row))
    (make-text-button (- (point) (length (car row))) (point) 'action (nth 1 row))
    (insert "\n")))))
(defun main-page (button)
 (let ((title "choose number by")
       (option-list '(("nickname" nickname-action)
    ("saved" save-phone-action)
    ("phone-number" phone-number-action)
    ("list" phone-number-list-action))))
  (erase-buffer)
  (insert title)
  (dolist (row option-list)
   (insert "\n" (car row))
   (make-text-button (- (point) (length (car row))) (point) 'action (nth 1 row)))
  (goto-char (+ 2 (length title)))))

(let ((buffer_name "gui"))
 (switch-to-buffer (get-buffer-create buffer_name))
 (main-page nil))
