#!/usr/bin/python3
# -*- coding: utf-8 -*-

# @author: omerlle (omer levin; omerlle@gmail.com)
# Copyright 2020 omer levin

import argparse
import modem_wrapper.software.helpers as helpers

def get_opt():
	parser = argparse.ArgumentParser(description='cli for droid4_modem.')
	parser.set_defaults(cmd=None)
	parser.add_argument('-a','--answer', help="answer for voice call", action='store_true', default=None)
	parser.add_argument('-g','--hangup', help="hanging up", dest='answer', action='store_false')
	parser.add_argument('-m','--modem', help="set the modem offline/online", action='store',choices=['off', 'on'])
	parser.add_argument('-s','--status', help="set the network strength offline/online", action='store',choices=['off', 'on'])
	parser.add_argument('-c','--clear', help="clear notify list and turn the new led(red) off", action='store_true')
	parser.add_argument('-n','--notify', help="notify last event", action='store_true')
	subparsers = parser.add_subparsers(help='modem command')
	system_parser = subparsers.add_parser('system')
	system_parser.add_argument('line', metavar='S', type=str, help='line from modem')
	system_parser.set_defaults(cmd="system")
	sms_parser = subparsers.add_parser('sms', help='show sms list')
	sms_parser.set_defaults(status=[])
	sms_parser.add_argument('-u','--unread', help="show unread sms", dest='sms_type', action='append_const', const=helpers.MessageStatus.UNREAD)
	sms_parser.add_argument('-r','--read', help="show read sms", dest='sms_type', action='append_const', const=helpers.MessageStatus.READ)
	sms_parser.add_argument('-s','--send', help="show send sms", dest='sms_type', action='append_const', const=helpers.MessageStatus.SEND)
	sms_parser.add_argument('-f','--fail', help="show send failed sms", dest='sms_type', action='append_const', const=helpers.MessageStatus.SEND_FAIL)
	sms_parser.add_argument('-i','--id', help="sms id", default=[], dest='ids', type=int, nargs='*')
	sms_parser.add_argument('-n','--nickname', help="names for sms", default=[], dest='nicknames', action='append')
	sms_parser.add_argument('-p','--phone', help="phones for sms", default=[], dest='phones', action='append')
	sms_parser.add_argument('-l','--length', help="sms list length", type=int, action='store')
	sms_parser.add_argument('-m','--mark', help="mark unread sms that select as read",action='store_true')
	sms_parser.add_argument('--delete', help="delete selected sms",action='store_true')
	sms_parser.set_defaults(cmd="sms")
	history_parser = subparsers.add_parser('history', help='show call history')
	history_parser.add_argument('-m','--miss', help="show miss calls", dest='call_type', action='append_const', const=helpers.CallsStatus.MISS)
	history_parser.add_argument('-d','--dial', help="show dial calls", dest='call_type', action='append_const', const=helpers.CallsStatus.DIALS)
	history_parser.add_argument('-i','--incoming', help="show incoming calls", dest='call_type', action='append_const', const=helpers.CallsStatus.INCOMING_CALL)
	history_parser.add_argument('-l','--length', help="history list length", type=int, action='store')
	history_parser.add_argument('-n','--nickname', help="names for history list", default=[], dest='nicknames', action='append')
	history_parser.add_argument('-p','--phone', help="phones for history list", default=[], dest='phones', action='append')
	history_parser.set_defaults(cmd="history")
	phonebook_parser = subparsers.add_parser('phonebook', help='phonebook')
	phonebook_subparsers = phonebook_parser.add_subparsers(help='phonebook action')
	del_phonebook_parser = phonebook_subparsers.add_parser('del', help='delete from phonebook').add_mutually_exclusive_group()
	del_phonebook_parser.add_argument('-i','--id', help="row id", action='store', type=int)
	del_phonebook_parser.add_argument('-p','--phone', help="phone", action='store')
	del_phonebook_parser.add_argument('-n','--nickname', help="nickname", action='store')
	del_phonebook_parser.set_defaults(action="del")
	add_phonebook_parser = phonebook_subparsers.add_parser('add', help='add new nickname to phonebook')
	add_phonebook_parser.add_argument('name', help="name to add", action='store')
	add_phonebook_parser.add_argument('phone', help="phone to add", action='store')
	add_phonebook_parser.add_argument('-n','--nickname', help="add nickname field", action='store')
	add_phonebook_parser.add_argument('-l','--lastname', help="add last name field", action='store')
	add_phonebook_parser.add_argument('-s','--subject', help="add subject field", action='store')
	add_phonebook_parser.add_argument('-d','--description',help="add description field", action='store')
	add_phonebook_parser.set_defaults(action="add")
	edit_phonebook_parser = phonebook_subparsers.add_parser('edit', help='edit phonebook')
	edit_phonebook_parser.add_argument('id', help="row id for edit", action='store', type=int)
	edit_phonebook_parser.add_argument('-p','--phone', help="edit phone", action='store')
	edit_phonebook_parser.add_argument('-k','--nickname', help="edit nickname", action='store')
	edit_phonebook_parser.add_argument('-l','--lastname', help="edit last name", action='store')
	edit_phonebook_parser.add_argument('-n','--name', help="edit name", action='store')
	edit_phonebook_parser.add_argument('-s','--subject', help="edit subject", action='store')
	edit_phonebook_parser.add_argument('-d','--description',help="edit description", action='store')
	edit_phonebook_parser.add_argument('-t','--time',help="update date field", action='store_true')
	edit_phonebook_parser.set_defaults(action="edit")
	show_phonebook_parser = phonebook_subparsers.add_parser('show', help='show phonebook')
	show_phonebook_parser.add_argument('-i','--id', help="show id in phonebook",  default=[], dest='ids', action='append', type=int)
	show_phonebook_parser.add_argument('-d','--description',help="show description field", action='store_true')
	show_phonebook_parser.add_argument('-t','--time',help="show update time field", action='store_true')
	show_phonebook_parser.add_argument('-p','--phone', help="show phonebook with phones", default=[], dest='phones', action='append')
	show_phonebook_parser.add_argument('-n','--name', help="show phonebook with names", default=[], dest='names', action='append')
	show_phonebook_parser.add_argument('-k','--nickname', help="show phonebook with nicknames", default=[], dest='nicknames', action='append')
	show_phonebook_parser.add_argument('-l','--lastname', help="show phonebook with last names", default=[], dest='lastnames', action='append')
	show_phonebook_parser.add_argument('-s','--subject', help="show subject that start with the pattern", action='store')
	show_phonebook_parser.add_argument('-f','--full', help="show only full pattern", action='store_true')
	show_phonebook_parser.set_defaults(action="show")
	update_phonebook_parser = phonebook_subparsers.add_parser('update', help='update phonebook lists')
	update_phonebook_parser.add_argument('-n','--nickname', help="update nickname list by phonebook",  action='store_true')
	update_phonebook_parser.add_argument('-l','--list', help="update phone list by phonebook",  action='store_true')
	update_phonebook_parser.set_defaults(action="update")
	phonebook_parser.set_defaults(cmd="phonebook")
	phonebook_parser.set_defaults(action=None)
	dials_parser = subparsers.add_parser('dials', help='dials for voice call')
	dials_parser.set_defaults(cmd="dials")
	dials_parser.add_argument('-n','--nickname', help="use name instead of phone for dials", action='store_true')
	dials_parser.add_argument('-p','--privileged', help="don't show the number", action='store_true')
	dials_parser.add_argument('phone', help="phone for dials")
	send_parser = subparsers.add_parser('send', help='send sms')
	send_parser.add_argument('-n','--nickname', help="names for action", default=[], dest='nicknames', action='append')
	send_parser.add_argument('-p','--phone', help="phones for action", default=[], dest='phones', action='append')
	send_parser.add_argument('send_message', help="text for send")
	send_parser.set_defaults(cmd="send")
	args = parser.parse_args()
	if args.cmd and args.cmd == "send" and not args.phones and not args.nicknames:
		print('miss at least one phone number or nickname')
		send_parser.print_usage()
		exit(-1)
	if args.cmd and args.cmd == "phonebook" and not args.action:
		print('miss action')
		phonebook_parser.print_usage()
		exit(-1)
	if args.cmd and args.cmd == "phonebook" and args.action == "edit" and not (args.phone or args.nickname or args.subject or args.description or args.time):
		print('miss filed for update')
		edit_phonebook_parser.print_usage()
		exit(-1)
	if args.cmd and args.cmd == "phonebook" and args.action == "update" and not (args.list or args.nickname):
		print('miss list for update')
		update_phonebook_parser.print_usage()
		exit(-1)
	return args
