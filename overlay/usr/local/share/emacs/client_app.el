;;; client_app.el --- 
;; 
;; Filename: client_app.el
;; Author: omer levin
;; Copyright (C) 2020, omer levin, all rights reserved.

(load "/root/.droid4/modem/nickname_hash.elc")
(setq save-list (make-hash-table :test 'equal))
(defun send-sms (button)
 (goto-char (point-min))
 (let ((msg (filter-buffer-substring 
    (line-beginning-position 2)
    (line-end-position (- (line-number-at-pos (point-max)) 1)))))
    (options-page nil)
    (shell-command (format "/usr/local/share/python/droid4_modem/software/main_modem_cli.py send -p '%s' '%s'" droid-phone-number msg))))
;    (message (format "sms -p '%s' %s" droid-phone-number msg)))))
(defun call-action (button)
 (goto-char (point-min))
 (shell-command (format "/usr/local/bin/droid4-dial.sh '%s'" droid-phone-number)))
(defun select-phone-number ()
 (beginning-of-line)
 (setq droid-name (buffer-substring-no-properties (search-forward "|" nil t) (- (search-forward "|" nil t) 1)))
 (setq droid-name (concat droid-name " " (buffer-substring-no-properties (point) (- (search-forward "|" nil t) 1))))
 (setq droid-phone-number (buffer-substring-no-properties (search-forward "|" nil t 4) (line-end-position))))
(defun sms-get-phone-number ()
 (goto-char (point-min))
 (beginning-of-line 6)
 (select-phone-number))
(defun select-phone-number-call-log-action (button)
  (select-phone-number)
  (options-page nil))
(defun select-phone-number-list-action (button)
 (select-phone-number)
 (set-buffer-modified-p nil)
 (kill-buffer)
 (options-page nil))
(defun view-sms-print (num)
 (goto-char (point-min))
 (beginning-of-line 6)
 (insert (format "%03d|" num) (shell-command-to-string (concat "sqlite3 /root/.droid4/modem/dynamic_data.db 'SELECT phone_book.last_name, phone_book.first_name, messages.id, messages.date, message_status.name, phone_book_nickname, messages.phone_number, msg FROM messages INNER JOIN message_status ON message_status.id = messages.status LEFT JOIN phone_book ON phone_book.phone_number = messages.phone_number WHERE complete=\"y\" ORDER BY messages.date DESC limit 1 offset " (number-to-string num) ";' | sed 's/|/\\n/7'"))))
(defun sms-next-action (button)
 (save-excursion
  (goto-char (point-min))
  (let ((num (+ 1 (string-to-number (buffer-substring-no-properties (line-beginning-position 6) (+ 3 (line-beginning-position 6)))))))
   (delete-region (line-beginning-position 6) (point-max))
   (view-sms-print num))))
(defun  sms-prev-action (button)
  (save-excursion
   (goto-char (point-min))
(let ((num (max 0 (- (string-to-number (buffer-substring-no-properties (line-beginning-position 6) (+ 3 (line-beginning-position 6)))) 1))))
  (delete-region (line-beginning-position 6) (point-max))
  (view-sms-print num))))
(defun view-sms-reply-action (button)
  (sms-get-phone-number)
  (send-sms-page nil))
(defun view-sms-call-action (button)
  (sms-get-phone-number)
  (call-action nil))
(defun view-sms-action (button)
  (let ((option-list '(("back" main-page)
    ("next"  sms-next-action)
    ("prev" sms-prev-action)
    ("reply" view-sms-reply-action)
    ("call" view-sms-call-action))))
   (erase-buffer)
   (dolist (row option-list)
    (insert (car row))
    (make-text-button (- (point) (length (car row))) (point) 'action (nth 1 row))
    (insert "\n"))
   (view-sms-print 0)
   (goto-char (point-min))))
(defun call-log-action (button)
 (let ((back "back"))
  (erase-buffer)
  (insert back)
  (make-text-button (- (point) (length back)) (point) 'action 'main-page)
  (insert "\n" (shell-command-to-string "sqlite3 /root/.droid4/modem/dynamic_data.db 'SELECT nickname, first_name, last_name, subject, voice_call_list.date, voice_call_status.type, description, phone FROM voice_call_list INNER JOIN voice_call_status ON voice_call_status.id = voice_call_list.status  LEFT JOIN phone_book ON phone_book.phone_number = voice_call_list.phone ORDER BY voice_call_list.date DESC limit 20;'"))
  (make-text-button (+ 1 (+ (point-min) (length back))) (point-max) 'action 'select-phone-number-call-log-action)
  (goto-char (point-min))))
(defun save-phone-action (button)
 (save-excursion
  (let ((row (gethash (completing-read "choose contact:" save-list) save-list)))
   (setq droid-name (car row))
   (setq droid-phone-number (nth 1 row))
   (options-page nil))))
(defun nickname-action (button)
 (save-excursion
  (let ((row (gethash (completing-read "nickname:" nickname-list) nickname-list)))
   (setq droid-name (car row))
   (setq droid-phone-number (nth 1 row))
   (options-page nil))))
(defun phone-number-action (button)
  (setq droid-name (read-from-minibuffer "number:"))
  (setq droid-phone-number droid-name)
  (options-page nil))
(defun phone-number-list-action (button)
(let ((buffer (find-file-noselect "/root/.droid4/modem/phone_list.txt")))
  (switch-to-buffer buffer)
  (make-text-button (point-min) (point-max) 'action 'select-phone-number-list-action)
  (setq buffer-read-only t)
  (widen)
  (goto-char (point-min))))
(defun send-sms-page (button)
 (let ((back "back")
   (send (concat "send to" droid-name)))
  (erase-buffer)
  (goto-char (point-min))
  (insert back)
  (make-text-button (- (point) (length back)) (point) 'action 'options-page)
  (insert "\n\n" send)
  (make-text-button (- (point) (length send)) (point) 'action 'send-sms)
  (goto-char (+ 2 (length back)))))
(defun options-page (button)
 (save-excursion
  (let ((option-list (cons (cons (concat "call" droid-name) '(call-action))
    (cons '("send sms" send-sms-page)
    '(("new number" main-page))))))
   (erase-buffer)
   (dolist (row option-list)
    (insert (car row))
    (make-text-button (- (point) (length (car row))) (point) 'action (nth 1 row))
    (insert "\n")))))
(defun main-page (button)
 (let ((title "choose number by")
       (option-list '(("sms" view-sms-action)
    ("call history" call-log-action)
    ("saved" save-phone-action)
    ("nickname" nickname-action)
    ("list" phone-number-list-action)
    ("phone-number" phone-number-action))))
  (erase-buffer)
  (insert title)
  (dolist (row option-list)
   (insert "\n" (car row))
   (make-text-button (- (point) (length (car row))) (point) 'action (nth 1 row)))
   (goto-char (point-min))
   (beginning-of-line 4)))
(let ((buffer_name "gui"))
 (switch-to-buffer (get-buffer-create buffer_name))
 (main-page nil))
